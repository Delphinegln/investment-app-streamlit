# -*- coding: utf-8 -*-
"""interface streamlit

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Mnb-KWW0rkMl48GncUVKjO_ERc_wb-xc
"""

import streamlit as st
import yfinance as yf
import pandas as pd
import datetime
import numpy as np

# --------------------------
# CONFIGURATION
# --------------------------
st.set_page_config(page_title="Asset Allocation Advisor", layout="wide")
st.title("ðŸ“Š Investment Recommendation Based on Your Risk Profile")

start_date = datetime.date.today() - datetime.timedelta(days=5*365)
start_date = start_date.strftime("%Y-%m-%d")
end_date = datetime.date.today().strftime("%Y-%m-%d")

ticker_symbols = ["AAPL","TSLA","JNJ","NVDA","AIR.PA","SIE.DE","OR.PA","NESN.SW","TCS.NS",
                  "VALE","BABA","NIO","VOO","VEA","VWO","ARKK","FBALX","VBIAX","TLT","BND",
                  "IEI","SHV","GLD","BTC-USD"]

@st.cache_data
def load_data():
    all_data = pd.DataFrame()
    volatility_data = []

    for ticker_symbol in ticker_symbols:
        try:
            data = yf.download(ticker_symbol, start=start_date, end=end_date, progress=False)
            if not data.empty:
                data['Daily_Return'] = data['Close'].pct_change()
                annual_volatility = data['Daily_Return'].std() * np.sqrt(252)
                annual_return = data['Daily_Return'].mean() * 252

                volatility_data.append({
                    "Ticker": ticker_symbol,
                    "Annual_Volatility": annual_volatility,
                    "Annual_Return": annual_return
                })
        except:
            continue
    return volatility_data

# --------------------------
# RISK PROFILE FILTERS
# --------------------------

def map_user_risk_to_vol_filter(risk_profile):
    if risk_profile == "Conservative":
        return lambda vol: vol < 0.2
    elif risk_profile == "Balanced":
        return lambda vol: 0.2 <= vol < 0.4
    elif risk_profile == "Aggressive":
        return lambda vol: vol >= 0.4
    else:
        return lambda vol: False

# --------------------------
# PRODUCT SELECTION
# --------------------------

def determine_num_products(amount):
    thresholds = [[10_000, 5], [100_000, 7], [500_000, 10]]
    num = 3
    for limit, count in reversed(thresholds):
        if amount >= limit:
            num = count
            break
    return num

def suggest_products(volatility_data, risk_profile, amount):
    vol_filter = map_user_risk_to_vol_filter(risk_profile)
    filtered = [item for item in volatility_data if vol_filter(item["Annual_Volatility"])]

    filtered.sort(key=lambda x: x["Annual_Return"], reverse=True)
    num_products = determine_num_products(amount)

    suggested = filtered[:num_products]
    return suggested

# --------------------------
# STREAMLIT UI
# --------------------------

with st.sidebar:
    st.header("ðŸ§¾ Simulation Settings")
    amount = st.number_input("ðŸ’° Amount to invest (â‚¬)", min_value=1000.0, step=1000.0, value=10_000.0)
    risk_profile = st.selectbox("ðŸŽ¯ Risk Profile", ["Conservative", "Balanced", "Aggressive"])
    horizon = st.selectbox("ðŸ“… Investment Horizon", ["Short", "Medium", "Long"])
    desired_return = st.slider("ðŸ“ˆ Desired Annual Return (%)", 0.0, 20.0, 5.0)

# --------------------------
# RESULT DISPLAY
# --------------------------

volatility_data = load_data()

if st.button("ðŸ“¥ Generate Investment Suggestion"):
    suggestions = suggest_products(volatility_data, risk_profile, amount)

    if suggestions:
        st.subheader(f"ðŸ”Ž Suggestions for a **{risk_profile}** profile with **â‚¬{amount:,.0f}** investment")

        df = pd.DataFrame(suggestions)
        df["Annual_Volatility"] = df["Annual_Volatility"].apply(lambda x: f"{x:.2%}")
        df["Annual_Return"] = df["Annual_Return"].apply(lambda x: f"{x:.2%}")
        st.dataframe(df.set_index("Ticker"))

        avg_vol = np.mean([p["Annual_Volatility"] for p in suggestions])
        avg_ret = np.mean([p["Annual_Return"] for p in suggestions])

        st.markdown(f"**ðŸ“Š Average Portfolio Volatility**: {avg_vol:.2%}")
        st.markdown(f"**ðŸ’¹ Average Portfolio Return**: {avg_ret:.2%}")
    else:
        st.warning("No assets match your selected risk profile.")